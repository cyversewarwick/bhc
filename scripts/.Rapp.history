length(kek) <- 1000
kek
length(7)
kek = 7
kek[1]
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
fix(blaa)
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
fix(task4)
task4('TAGACC','AGACC')
task4('cat','cat')
kek = c(1:10 7)
kek = c(1:10, 7)
kek
which.max(kek)
kek = c(5:10, 7)
which.max(kek)
matrix(c(0,0,-1,1,-1,1,1,-1,1,-1,0,0,-1,1,-1,1),8,2)
shift_position <- function(pos,mode) {#
	shift_matrix = matrix(c(0,0,-1,1,-1,1,1,-1,1,-1,0,0,-1,1,-1,1),8,2)#
	return(pos+shift_matrix[mode,]) }#
#
check_if_fits <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		if ((i<1 | i>nrow(M)) | (j<1 | j>ncol(M)))#
			return(FALSE)#
		if (substr(str,ind,ind)!=M[i,j] & M[i,j]!=' ')#
			return(FALSE)#
		pos = shift_position(pos,mode) }#
	return(TRUE) }#
#
write_to_matrix <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		M[pos(1),pos(2)] = substr(str,ind,ind)#
		pos = shift_position(pos,mode) }#
	return(M) }#
#
make_puzzle <- function(a,b,words) {#
	M = matrix(' ',a,b)#
	for (i in 1:length(words)) {#
		positions = list()#
		weights_vector = c()#
		for (j in 1:8) {#
			mode_positions = c()#
			for (ind1 in 1:a) {#
				for (ind2 in 1:b) {#
					if (check_if_fits(M,words[i],c(ind1,ind2),j))#
						mode_positions = c(mode_positions,((ind1-1)*b+ind2)) }#
			positions[[j]] = mode_positions#
			weights_vector[j] = length(mode_positions) } }#
		if (all(weights_vector==0)) {#
			print('Whoopsy daisy! Can\'t fit the words! Silly me!')#
			return(FALSE) }#
		mode_sample = sample(1:8,1,prob=weights_vector)#
		position_sample = sample(positions[[mode_sample]],1)#
		pos_i = ceiling(position_sample/b)#
		pos_j = position_sample%%b#
		if (pos_j==0)#
			pos_j=b#
		M = write_to_matrix(M,words[i],c(pos_i,pos_j),mode_sample) }#
	for (i in 1:a) {#
		for (j in 1:b) {#
			if (M[i,j]==' ')#
				#letters does exist and has all lower case letters. so let's use that#
				M[i,j] = sample(letters,1) }}#
	return(M) }
make_puzzle(10,10,c('HELL','PLS'))
shift_position <- function(pos,mode) {#
	shift_matrix = matrix(c(0,0,-1,1,-1,1,1,-1,1,-1,0,0,-1,1,-1,1),8,2)#
	return(pos+shift_matrix[mode,]) }#
#
check_if_fits <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		if ((pos(1)<1 | pos(1)>nrow(M)) | (pos(2)<1 | pos(2)>ncol(M)))#
			return(FALSE)#
		if (substr(str,ind,ind)!=M[i,j] & M[i,j]!=' ')#
			return(FALSE)#
		pos = shift_position(pos,mode) }#
	return(TRUE) }#
#
write_to_matrix <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		M[pos(1),pos(2)] = substr(str,ind,ind)#
		pos = shift_position(pos,mode) }#
	return(M) }#
#
make_puzzle <- function(a,b,words) {#
	M = matrix(' ',a,b)#
	for (i in 1:length(words)) {#
		positions = list()#
		weights_vector = c()#
		for (j in 1:8) {#
			mode_positions = c()#
			for (ind1 in 1:a) {#
				for (ind2 in 1:b) {#
					if (check_if_fits(M,words[i],c(ind1,ind2),j))#
						mode_positions = c(mode_positions,((ind1-1)*b+ind2)) }#
			positions[[j]] = mode_positions#
			weights_vector[j] = length(mode_positions) } }#
		if (all(weights_vector==0)) {#
			print('Whoopsy daisy! Can\'t fit the words! Silly me!')#
			return(FALSE) }#
		mode_sample = sample(1:8,1,prob=weights_vector)#
		position_sample = sample(positions[[mode_sample]],1)#
		pos_i = ceiling(position_sample/b)#
		pos_j = position_sample%%b#
		if (pos_j==0)#
			pos_j=b#
		M = write_to_matrix(M,words[i],c(pos_i,pos_j),mode_sample) }#
	for (i in 1:a) {#
		for (j in 1:b) {#
			if (M[i,j]==' ')#
				#letters does exist and has all lower case letters. so let's use that#
				M[i,j] = sample(letters,1) }}#
	return(M) }
make_puzzle(10,10,c('HELL','PLS'))
shift_position <- function(pos,mode) {#
	shift_matrix = matrix(c(0,0,-1,1,-1,1,1,-1,1,-1,0,0,-1,1,-1,1),8,2)#
	return(pos+shift_matrix[mode,]) }#
#
check_if_fits <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		if ((pos[1]<1 | pos[1]>nrow(M)) | (pos[2]<1 | pos[2]>ncol(M)))#
			return(FALSE)#
		if (substr(str,ind,ind)!=M[i,j] & M[i,j]!=' ')#
			return(FALSE)#
		pos = shift_position(pos,mode) }#
	return(TRUE) }#
#
write_to_matrix <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		M[pos[1],pos[2]] = substr(str,ind,ind)#
		pos = shift_position(pos,mode) }#
	return(M) }#
#
make_puzzle <- function(a,b,words) {#
	M = matrix(' ',a,b)#
	for (i in 1:length(words)) {#
		positions = list()#
		weights_vector = c()#
		for (j in 1:8) {#
			mode_positions = c()#
			for (ind1 in 1:a) {#
				for (ind2 in 1:b) {#
					if (check_if_fits(M,words[i],c(ind1,ind2),j))#
						mode_positions = c(mode_positions,((ind1-1)*b+ind2)) }#
			positions[[j]] = mode_positions#
			weights_vector[j] = length(mode_positions) } }#
		if (all(weights_vector==0)) {#
			print('Whoopsy daisy! Can\'t fit the words! Silly me!')#
			return(FALSE) }#
		mode_sample = sample(1:8,1,prob=weights_vector)#
		position_sample = sample(positions[[mode_sample]],1)#
		pos_i = ceiling(position_sample/b)#
		pos_j = position_sample%%b#
		if (pos_j==0)#
			pos_j=b#
		M = write_to_matrix(M,words[i],c(pos_i,pos_j),mode_sample) }#
	for (i in 1:a) {#
		for (j in 1:b) {#
			if (M[i,j]==' ')#
				#letters does exist and has all lower case letters. so let's use that#
				M[i,j] = sample(letters,1) }}#
	return(M) }
make_puzzle(10,10,c('HELL','PLS'))
shift_position <- function(pos,mode) {#
	shift_matrix = matrix(c(0,0,-1,1,-1,1,1,-1,1,-1,0,0,-1,1,-1,1),8,2)#
	return(pos+shift_matrix[mode,]) }#
#
check_if_fits <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		if ((pos[1]<1 | pos[1]>nrow(M)) | (pos[2]<1 | pos[2]>ncol(M)))#
			return(FALSE)#
		if (substr(str,ind,ind)!=M[pos[1],pos[2]] & M[pos[1],pos[2]]!=' ')#
			return(FALSE)#
		pos = shift_position(pos,mode) }#
	return(TRUE) }#
#
write_to_matrix <- function(M,str,pos,mode) {#
	for (ind in 1:nchar(str)) {#
		M[pos[1],pos[2]] = substr(str,ind,ind)#
		pos = shift_position(pos,mode) }#
	return(M) }#
#
make_puzzle <- function(a,b,words) {#
	M = matrix(' ',a,b)#
	for (i in 1:length(words)) {#
		positions = list()#
		weights_vector = c()#
		for (j in 1:8) {#
			mode_positions = c()#
			for (ind1 in 1:a) {#
				for (ind2 in 1:b) {#
					if (check_if_fits(M,words[i],c(ind1,ind2),j))#
						mode_positions = c(mode_positions,((ind1-1)*b+ind2)) }#
			positions[[j]] = mode_positions#
			weights_vector[j] = length(mode_positions) } }#
		if (all(weights_vector==0)) {#
			print('Whoopsy daisy! Can\'t fit the words! Silly me!')#
			return(FALSE) }#
		mode_sample = sample(1:8,1,prob=weights_vector)#
		position_sample = sample(positions[[mode_sample]],1)#
		pos_i = ceiling(position_sample/b)#
		pos_j = position_sample%%b#
		if (pos_j==0)#
			pos_j=b#
		M = write_to_matrix(M,words[i],c(pos_i,pos_j),mode_sample) }#
	for (i in 1:a) {#
		for (j in 1:b) {#
			if (M[i,j]==' ')#
				#letters does exist and has all lower case letters. so let's use that#
				M[i,j] = sample(letters,1) }}#
	return(M) }
make_puzzle(10,10,c('HELL','PLS'))
library(BHC)
data <- matrix(0,15,10)#
itemLabels <- vector("character",15)#
data[1:5,] <- 1 ; itemLabels[1:5] <- "a"#
data[6:10,] <- 2 ; itemLabels[6:10] <- "b"#
data[11:15,] <- 3 ; itemLabels[11:15] <- "c"#
timePoints <- 1:10
newData <- data[] + rnorm(150, 0, 0.1);#
percentiles <- FindOptimalBinning(newData, itemLabels, transposeData=TRUE, verbose=TRUE)#
discreteData <- DiscretiseData(t(newData), percentiles=percentiles)#
discreteData <- t(discreteData)#
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE)
plot(h3)
plot(hc3)
heatmap(hc3)
discreteData
data
discreteData2 = discreteData
discreteData2[15,10]=3
bhc(dicreteData2,itemLabels,verbose=TRUE)
bhc(discreteData2,itemLabels,verbose=TRUE)
discreteData2
d1 = bhc(discreteData2,itemLabels,verbose=TRUE)
plot(d1)
discreteData2[1,1]=17
d1 = bhc(discreteData2,itemLabels,verbose=TRUE)
d2 = bhc(discreteData2,itemLabels,verbose=TRUE)
d2
plot(d2)
itemLabels
itemLabels[1]="a1"
d2 = bhc(discreteData2,itemLabels,verbose=TRUE)
plot(d2)
discreteData2
discreteData2[1,1]=5
d2 = bhc(discreteData2,itemLabels,verbose=TRUE)
discreteData2[1,1]=4
d2 = bhc(discreteData2,itemLabels,verbose=TRUE)
plot(d2)
discreteData2
discreteData2[1,]=discreteData2[2,]
discreteData2
discreteData2[1,1]=4
d2 = bhc(discreteData2,itemLabels,verbose=TRUE)
plot(d2)
library(BHC)
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv')
genes = rownames(data)
data2 = zeros(17,24)
data = data[:,1:24]
data = data.matrix(data)
data = data[:,1:24]
data = data[,1:24]
data
data=data[-1,]
genes = genes[-1]
data
newData = data
percentiles <- FindOptimalBinning(newData, itemLabels, transposeData=TRUE, verbose=TRUE)
discreteData <- DiscretiseData(t(newData), percentiles=percentiles)
discreteData <- t(discreteData)
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE)
itemLabels = genes
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE)
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE, dataType='time-course')
plot(hc3)
itemLabels
hc4 <- bhc(discreteData, itemLabels, verbose=TRUE)
plot(hc4)
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE, dataType='time-course',timepoints=c(1:12,1:12))
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE, dataType='time-course',timePoints=c(1:12,1:12))
plot(hc3)
hc3 <- bhc(discreteData, itemLabels, verbose=TRUE, dataType='time-course',timePoints=c(1:8,1:8,1:8))
plot(hc3)
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv',row.names=1,col.names=2)
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv',row.names=1,col.names=V2)
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv',row.names=1,col.names='V2')
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv',row.names=1,header=TRUE)
data[1:5,1:5]
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17.csv',row.names=1,header=TRUE,check.names=FALSE)
data[1:5,1:5]
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17nohead.csv',row.names=1,header=TRUE,check.names=FALSE)
data[1:5,1:5]
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17nohead.csv',row.names=1,header=TRUE,check.names=FALSE)
data[1:5,1:5]
genes = rownames(data)#
samples = colnames(data)#
data = data.matrix(data)
samples
as.integer(samples)
'dogs'=='cat'
heatmap(data)
heatmap(discreteData)
heatmap(discreteData,Colv=None)
heatmap(discreteData,Colv=FALSE)
pheatmap(data)
library(pheatmap)
install.packages(pheatmap)
library(pheatmap)
pheatmap(data)
pheatmap(data,cluster_cols=FALSE)
hc3
pheatmap(data,cluster_cols=FALSE, cluster_rows = hc3)
hc3
hclust(hc3)
as.hclust(hc3)
pheatmap(data,cluster_cols=FALSE, cluster_rows = as.hclust(hc3))
hc3
plot(hc3)
data[1:5,1:5]
help(heatmap.2)
library(gplots)
help(heatmap.2)
heatmap2(data,Rowv=hc3,Colv=FALSE)
heatmap.2(data,Rowv=hc3,Colv=FALSE)
heatmap(data,Rowv=hc3,Colv=FALSE)
heatmap(data,Colv=NA,Rowv=hc3)
dim(data)
dim(discreteData)
heatmap(discreteData,Colv=NA,Rowv=hc3)
bhc(t(discreteData),1:24,dataType='multinomial',verbose=TRUE)
samples
samples = 1:24
percentiles2 = FindOptimalBinning(data, samples, transposeData=FALSE, verbose=TRUE)
percentiles2 = FindOptimalBinning(data,transposeData=FALSE,verbose=TRUE)
percentiles2 = FindOptimalBinning(data,genes,transposeData=FALSE,verbose=TRUE)
discreteData2 = DiscretiseData(data, percentiles=percentiles2)#
		discreteData2 = t(discreteData2)
discreteData[1:5,1:5]
discreteData2[1:5,1:5]
dim(discreteData)
dim(discreteData2)
percentiles = FindOptimalBinning(data, genes, transposeData=TRUE, verbose=TRUE)#
discreteData = DiscretiseData(t(data), percentiles=percentiles)#
discreteData = t(discreteData)
dim(discreteData)
percentiles
percentiles2
discreteData[1:5,1:5]
discreteData2[1:5,1:5]
colorRampPalette(c("red","white","blue"))(256)
heatmap(data,col=colorRampPalette(c("red","white","blue"))(256))
heatmap(data,col=colorRampPalette(c("yellow","white","blue"))(256))
heatmap(data,col=colorRampPalette(c("yellow","black","blue"))(256))
heatmap(data)
heatmap(data,col=brewer.pal(11,'RdBu'))
library(RColorBrewer)
heatmap(data,col=brewer.pal(11,'RdBu'))
heatmap(data,col=brewer.pal(256,'RdBu'))
heatmap(data,col=brewer.pal(256,'BrBG'))
heatmap(data,col=brewer.pal(256,'PiYG'))
heatmap(data,col=brewer.pal(256,'PRGn'))
heatmap(data,col=brewer.pal(256,'PuOr'))
heatmap(data,col=brewer.pal(256,'RdGy'))
heatmap(data,col=brewer.pal(256,'RdYlBu'))
heatmap(data,col=brewer.pal(256,'RdYlGn'))
heatmap(data,col=brewer.pal(256,'Spectral'))
heatmap(data,col=brewer.pal(256,'Paired'))
heatmap(data,col=brewer.pal(256,'BrBG'))
heatmap(data,col=brewer.pal(256,'PiYG'))
heatmap(data,col=brewer.pal(256,' PRGn'))
heatmap(data,col=brewer.pal(256,'PRGn'))
heatmap(data,col=brewer.pal(256,'PuOr'))
heatmap(discreteData,col=brewer.pal(256,'PuOr'))
unique(discreteData)
unique(unique(discreteData))
heatmap(discreteData,col=brewer.pal(256,'PuOr'))
heatmap(discreteData,col=brewer.pal(3,'PuOr'))
heatmap(discreteData,col=brewer.pal(3,'RdBu'))
discreteData[,1:5]
heatmap(discreteData,col=brewer.pal(3,'RdBu'),Colv=NA)
heatmap(discreteData-1,col=brewer.pal(3,'RdBu'),Colv=NA)
heatmap(discreteData-1,col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
display.brewer.pal(3,'RdBu')
heatmap(discreteData-1,col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
heatmap(discreteData[1:5,1:5]-1,col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
discreteData[1:5,1:5]-1
discreteData[1:5,1:5]
heatmap(discreteData[1:5,1:5],col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
heatmap(discreteData[1:5,1:5],Colv=NA,Rowv=NA)
heatmap(discreteData[1:5,1:5],col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
discreteData[1:5,1:5]
data = matrix(c(0,0,1,1,1,2,2,2,2,2,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0),5,5,byrow=TRUE)
data
heatmap(data)
heatmap(data,col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA)
heatmap(data,col=brewer.pal(3,'RdBu'),Colv=NA,Rowv=NA,scale="none")
data
data = read.csv('~/Documents/python/ip2/GP2S/scripts/demo/testdata/botrytis17nohead.csv',row.names=1,header=TRUE,check.names=FALSE)
heatmap(data,col=brewer.pal(17,'PuOr'))
heatmap(data.matrix(data),col=brewer.pal(17,'PuOr'))
heatmap(data.matrix(data),col=brewer.pal(17,'PuOr'),scale='none')
heatmap(data.matrix(data),col=colorRampPalette(c('red','white','blue'),100),scale='none')
heatmap(data.matrix(data),col=colorRampPalette(c('red','white','blue'))(n=100),scale='none')
heatmap(data.matrix(data),col=colorRampPalette(c('red','green'))(n=100),scale='none')
ones(5)
mean(matrix(c(1,1,1,1),2,2))
matrix(c(1,1,1,1),2,2)
std(matrix(c(1,1,1,1),2,2))
sd(matrix(c(1,1,1,1),2,2))
matrix(c(1,1,1,1),2,2)/4
library(BHC)
install.packages('argparse')
chdir('~/Documents/python/ip2/BHC/scripts')
setwd('~/Documents/python/ip2/BHC/scripts')
data = read.csv('botrytis17.csv',header=TRUE,row.names=1,check.names=FALSE)
genes = rownames(data)#
samples = colnames(data)#
data = data.matrix(data)
data
data2 = data
percentiles = FindOptimalBinning(data, genes, transposeData=TRUE, verbose=TRUE)#
discreteData = DiscretiseData(t(data), percentiles=percentiles)#
discreteData = t(discreteData)
library(BHC)
install.packages(BHC)
source("https://bioconductor.org/biocLite.R")#
biocLite("BHC")
library(BHC)
source("https://bioconductor.org/biocLite.R")#
biocLite("BHC")
percentiles = FindOptimalBinning(data, genes, transposeData=TRUE, verbose=TRUE)#
discreteData = DiscretiseData(t(data), percentiles=percentiles)#
discreteData = t(discreteData)
install.packages(RColorBrewer)
library(RColorBrewer)
discreteData[1:5,1:5]
heatmap(discreteData[1:5,1:5], scale="none", col=brewer.pal(11,'RdBu'))
heatmap(discreteData[1:5,1:5], scale="none", col=brewer.pal(11,'RdBu'))
